{
  "version": 3,
  "sources": ["../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/helpers.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/bytes.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/internal.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/src/index.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/constants.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/account.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/units.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/address.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/db.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/types.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/signature.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/asyncEventEmitter.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/blobs.ts", "../../@web3auth/ethereum-provider/node_modules/@ethereumjs/util/src/provider.ts"],
  "sourcesContent": ["import { isHexString } from './internal.js'\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexport const assertIsHexString = function (input: string): void {\n  if (!isHexString(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexport const assertIsBytes = function (input: Uint8Array): void {\n  if (!(input instanceof Uint8Array)) {\n    const msg = `This method only supports Uint8Array but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexport const assertIsArray = function (input: number[]): void {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexport const assertIsString = function (input: string): void {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n", "import { getRandomBytesSync } from 'ethereum-cryptography/random.js'\n// eslint-disable-next-line no-restricted-imports\nimport { bytesToHex as _bytesToUnprefixedHex } from 'ethereum-cryptography/utils.js'\n\nimport { assertIsArray, assertIsBytes, assertIsHexString } from './helpers.js'\nimport { isHexPrefixed, isHexString, padToEven, stripHexPrefix } from './internal.js'\n\nimport type { PrefixedHexString, TransformabletoBytes } from './types.js'\n\nconst BIGINT_0 = BigInt(0)\n\n/**\n * @deprecated\n */\nexport const bytesToUnprefixedHex = _bytesToUnprefixedHex\n\n// hexToBytes cache\nconst hexToBytesMapFirstKey: { [key: string]: number } = {}\nconst hexToBytesMapSecondKey: { [key: string]: number } = {}\n\nfor (let i = 0; i < 16; i++) {\n  const vSecondKey = i\n  const vFirstKey = i * 16\n  const key = i.toString(16).toLowerCase()\n  hexToBytesMapSecondKey[key] = vSecondKey\n  hexToBytesMapSecondKey[key.toUpperCase()] = vSecondKey\n  hexToBytesMapFirstKey[key] = vFirstKey\n  hexToBytesMapFirstKey[key.toUpperCase()] = vFirstKey\n}\n\n/**\n * NOTE: only use this function if the string is even, and only consists of hex characters\n * If this is not the case, this function could return weird results\n * @deprecated\n */\nfunction _unprefixedHexToBytes(hex: string): Uint8Array {\n  const byteLen = hex.length\n  const bytes = new Uint8Array(byteLen / 2)\n  for (let i = 0; i < byteLen; i += 2) {\n    bytes[i / 2] = hexToBytesMapFirstKey[hex[i]] + hexToBytesMapSecondKey[hex[i + 1]]\n  }\n  return bytes\n}\n\n/**\n * @deprecated\n */\nexport const unprefixedHexToBytes = (inp: string) => {\n  if (inp.slice(0, 2) === '0x') {\n    throw new Error('hex string is prefixed with 0x, should be unprefixed')\n  } else {\n    return _unprefixedHexToBytes(padToEven(inp))\n  }\n}\n\n/****************  Borrowed from @chainsafe/ssz */\n// Caching this info costs about ~1000 bytes and speeds up toHexString() by x6\nconst hexByByte = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'))\n\nexport const bytesToHex = (bytes: Uint8Array): string => {\n  let hex = '0x'\n  if (bytes === undefined || bytes.length === 0) return hex\n  for (const byte of bytes) {\n    hex += hexByByte[byte]\n  }\n  return hex\n}\n\n// BigInt cache for the numbers 0 - 256*256-1 (two-byte bytes)\nconst BIGINT_CACHE: bigint[] = []\nfor (let i = 0; i <= 256 * 256 - 1; i++) {\n  BIGINT_CACHE[i] = BigInt(i)\n}\n\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n * @param {Uint8Array} bytes the bytes to convert\n * @returns {bigint}\n */\nexport const bytesToBigInt = (bytes: Uint8Array, littleEndian = false): bigint => {\n  if (littleEndian) {\n    bytes.reverse()\n  }\n  const hex = bytesToHex(bytes)\n  if (hex === '0x') {\n    return BIGINT_0\n  }\n  if (hex.length === 4) {\n    // If the byte length is 1 (this is faster than checking `bytes.length === 1`)\n    return BIGINT_CACHE[bytes[0]]\n  }\n  if (hex.length === 6) {\n    return BIGINT_CACHE[bytes[0] * 256 + bytes[1]]\n  }\n  return BigInt(hex)\n}\n\n/**\n * Converts a {@link Uint8Array} to a {@link number}.\n * @param {Uint8Array} bytes the bytes to convert\n * @return  {number}\n * @throws If the input number exceeds 53 bits.\n */\nexport const bytesToInt = (bytes: Uint8Array): number => {\n  const res = Number(bytesToBigInt(bytes))\n  if (!Number.isSafeInteger(res)) throw new Error('Number exceeds 53 bits')\n  return res\n}\n\nexport const hexToBytes = (hex: string): Uint8Array => {\n  if (typeof hex !== 'string') {\n    throw new Error(`hex argument type ${typeof hex} must be of type string`)\n  }\n\n  if (!/^0x[0-9a-fA-F]*$/.test(hex)) {\n    throw new Error(`Input must be a 0x-prefixed hexadecimal string, got ${hex}`)\n  }\n\n  hex = hex.slice(2)\n\n  if (hex.length % 2 !== 0) {\n    hex = padToEven(hex)\n  }\n  return _unprefixedHexToBytes(hex)\n}\n\n/******************************************/\n\n/**\n * Converts a {@link number} into a {@link PrefixedHexString}\n * @param {number} i\n * @return {PrefixedHexString}\n */\nexport const intToHex = (i: number): PrefixedHexString => {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`)\n  }\n  return `0x${i.toString(16)}`\n}\n\n/**\n * Converts an {@link number} to a {@link Uint8Array}\n * @param {Number} i\n * @return {Uint8Array}\n */\nexport const intToBytes = (i: number): Uint8Array => {\n  const hex = intToHex(i)\n  return hexToBytes(hex)\n}\n\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n *  * @param {bigint} num the bigint to convert\n * @returns {Uint8Array}\n */\nexport const bigIntToBytes = (num: bigint, littleEndian = false): Uint8Array => {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  const bytes = toBytes('0x' + padToEven(num.toString(16)))\n\n  return littleEndian ? bytes.reverse() : bytes\n}\n\n/**\n * Returns a Uint8Array filled with 0s.\n * @param {number} bytes the number of bytes of the Uint8Array\n * @return {Uint8Array}\n */\nexport const zeros = (bytes: number): Uint8Array => {\n  return new Uint8Array(bytes)\n}\n\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @param {boolean} right whether to start padding form the left or right\n * @return {Uint8Array}\n */\nconst setLength = (msg: Uint8Array, length: number, right: boolean): Uint8Array => {\n  if (right) {\n    if (msg.length < length) {\n      return new Uint8Array([...msg, ...zeros(length - msg.length)])\n    }\n    return msg.subarray(0, length)\n  } else {\n    if (msg.length < length) {\n      return new Uint8Array([...zeros(length - msg.length), ...msg])\n    }\n    return msg.subarray(-length)\n  }\n}\n\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */\nexport const setLengthLeft = (msg: Uint8Array, length: number): Uint8Array => {\n  assertIsBytes(msg)\n  return setLength(msg, length, false)\n}\n\n/**\n * Right Pads a `Uint8Array` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */\nexport const setLengthRight = (msg: Uint8Array, length: number): Uint8Array => {\n  assertIsBytes(msg)\n  return setLength(msg, length, true)\n}\n\n/**\n * Trims leading zeros from a `Uint8Array`, `number[]` or PrefixedHexString`.\n * @param {Uint8Array|number[]|PrefixedHexString} a\n * @return {Uint8Array|number[]|PrefixedHexString}\n */\nconst stripZeros = <\n  T extends Uint8Array | number[] | PrefixedHexString = Uint8Array | number[] | PrefixedHexString\n>(\n  a: T\n): T => {\n  let first = a[0]\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1) as T\n    first = a[0]\n  }\n  return a\n}\n\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param {Uint8Array} a\n * @return {Uint8Array}\n */\nexport const unpadBytes = (a: Uint8Array): Uint8Array => {\n  assertIsBytes(a)\n  return stripZeros(a)\n}\n\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param  {number[]} a\n * @return {number[]}\n */\nexport const unpadArray = (a: number[]): number[] => {\n  assertIsArray(a)\n  return stripZeros(a)\n}\n\n/**\n * Trims leading zeros from a `PrefixedHexString`.\n * @param {PrefixedHexString} a\n * @return {PrefixedHexString}\n */\nexport const unpadHex = (a: string): PrefixedHexString => {\n  assertIsHexString(a)\n  a = stripHexPrefix(a)\n  return '0x' + stripZeros(a)\n}\n\nexport type ToBytesInputTypes =\n  | PrefixedHexString\n  | number\n  | bigint\n  | Uint8Array\n  | number[]\n  | TransformabletoBytes\n  | null\n  | undefined\n\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Buffer`, `Uint8Array`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBytes()` method.\n * @param {ToBytesInputTypes} v the value\n * @return {Uint8Array}\n */\n\nexport const toBytes = (v: ToBytesInputTypes): Uint8Array => {\n  if (v === null || v === undefined) {\n    return new Uint8Array()\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Uint8Array.from(v)\n  }\n\n  if (typeof v === 'string') {\n    if (!isHexString(v)) {\n      throw new Error(\n        `Cannot convert string to Uint8Array. toBytes only supports 0x-prefixed hex strings and this string was given: ${v}`\n      )\n    }\n    return hexToBytes(v)\n  }\n\n  if (typeof v === 'number') {\n    return intToBytes(v)\n  }\n\n  if (typeof v === 'bigint') {\n    if (v < BIGINT_0) {\n      throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`)\n    }\n    let n = v.toString(16)\n    if (n.length % 2) n = '0' + n\n    return unprefixedHexToBytes(n)\n  }\n\n  if (v.toBytes !== undefined) {\n    // converts a `TransformableToBytes` object to a Uint8Array\n    return v.toBytes()\n  }\n\n  throw new Error('invalid type')\n}\n\n/**\n * Interprets a `Uint8Array` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param {Uint8Array} num Signed integer value\n * @returns {bigint}\n */\nexport const fromSigned = (num: Uint8Array): bigint => {\n  return BigInt.asIntN(256, bytesToBigInt(num))\n}\n\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Uint8Array`. Assumes 256-bit numbers.\n * @param {bigint} num\n * @returns {Uint8Array}\n */\nexport const toUnsigned = (num: bigint): Uint8Array => {\n  return bigIntToBytes(BigInt.asUintN(256, num))\n}\n\n/**\n * Adds \"0x\" to a given `string` if it does not already start with \"0x\".\n * @param {string} str\n * @return {PrefixedHexString}\n */\nexport const addHexPrefix = (str: string): PrefixedHexString => {\n  if (typeof str !== 'string') {\n    return str\n  }\n\n  return isHexPrefixed(str) ? str : '0x' + str\n}\n\n/**\n * Shortens a string  or Uint8Array's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n * @param {Uint8Array | string} bytes\n * @param {number} maxLength\n * @return {string}\n */\nexport const short = (bytes: Uint8Array | string, maxLength: number = 50): string => {\n  const byteStr = bytes instanceof Uint8Array ? bytesToHex(bytes) : bytes\n  const len = byteStr.slice(0, 2) === '0x' ? maxLength + 2 : maxLength\n  if (byteStr.length <= len) {\n    return byteStr\n  }\n  return byteStr.slice(0, len) + '…'\n}\n\n/**\n * Checks provided Uint8Array for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Uint8Array values\n * @throws if any provided value is found to have leading zero bytes\n */\nexport const validateNoLeadingZeroes = (values: { [key: string]: Uint8Array | undefined }) => {\n  for (const [k, v] of Object.entries(values)) {\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(`${k} cannot have leading zeroes, received: ${bytesToHex(v)}`)\n    }\n  }\n}\n\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n * @param {bigint} num the bigint to convert\n * @returns {PrefixedHexString}\n */\nexport const bigIntToHex = (num: bigint): PrefixedHexString => {\n  return '0x' + num.toString(16)\n}\n\n/**\n * Calculates max bigint from an array of bigints\n * @param args array of bigints\n */\nexport const bigIntMax = (...args: bigint[]) => args.reduce((m, e) => (e > m ? e : m))\n\n/**\n * Calculates min BigInt from an array of BigInts\n * @param args array of bigints\n */\nexport const bigIntMin = (...args: bigint[]) => args.reduce((m, e) => (e < m ? e : m))\n\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {bigint} value the bigint to convert\n * @returns {Uint8Array}\n */\nexport const bigIntToUnpaddedBytes = (value: bigint): Uint8Array => {\n  return unpadBytes(bigIntToBytes(value))\n}\n\n/**\n * Convert value from number to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {number} value the bigint to convert\n * @returns {Uint8Array}\n */\nexport const intToUnpaddedBytes = (value: number): Uint8Array => {\n  return unpadBytes(intToBytes(value))\n}\n\n/**\n * Compares two Uint8Arrays and returns a number indicating their order in a sorted array.\n *\n * @param {Uint8Array} value1 - The first Uint8Array to compare.\n * @param {Uint8Array} value2 - The second Uint8Array to compare.\n * @returns {number} A positive number if value1 is larger than value2,\n *                   A negative number if value1 is smaller than value2,\n *                   or 0 if value1 and value2 are equal.\n */\nexport const compareBytes = (value1: Uint8Array, value2: Uint8Array): number => {\n  const bigIntValue1 = bytesToBigInt(value1)\n  const bigIntValue2 = bytesToBigInt(value2)\n  return bigIntValue1 > bigIntValue2 ? 1 : bigIntValue1 < bigIntValue2 ? -1 : 0\n}\n\n/**\n * Generates a Uint8Array of random bytes of specified length.\n *\n * @param {number} length - The length of the Uint8Array.\n * @returns {Uint8Array} A Uint8Array of random bytes of specified length.\n */\nexport const randomBytes = (length: number): Uint8Array => {\n  return getRandomBytesSync(length)\n}\n\n/**\n * This mirrors the functionality of the `ethereum-cryptography` export except\n * it skips the check to validate that every element of `arrays` is indead a `uint8Array`\n * Can give small performance gains on large arrays\n * @param {Uint8Array[]} arrays an array of Uint8Arrays\n * @returns {Uint8Array} one Uint8Array with all the elements of the original set\n * works like `Buffer.concat`\n */\nexport const concatBytes = (...arrays: Uint8Array[]): Uint8Array => {\n  if (arrays.length === 1) return arrays[0]\n  const length = arrays.reduce((a, arr) => a + arr.length, 0)\n  const result = new Uint8Array(length)\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i]\n    result.set(arr, pad)\n    pad += arr.length\n  }\n  return result\n}\n\n/**\n * @notice Convert a Uint8Array to a 32-bit integer\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 32-bit integer.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {number} The 32-bit integer read from the input Uint8Array.\n */\nexport function bytesToInt32(bytes: Uint8Array, littleEndian: boolean = false): number {\n  if (bytes.length < 4) {\n    bytes = setLength(bytes, 4, littleEndian)\n  }\n  const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength)\n  return dataView.getUint32(0, littleEndian)\n}\n\n/**\n * @notice Convert a Uint8Array to a 64-bit bigint\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 64-bit bigint.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {bigint} The 64-bit bigint read from the input Uint8Array.\n */\nexport function bytesToBigInt64(bytes: Uint8Array, littleEndian: boolean = false): bigint {\n  if (bytes.length < 8) {\n    bytes = setLength(bytes, 8, littleEndian)\n  }\n  const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength)\n  return dataView.getBigUint64(0, littleEndian)\n}\n\n/**\n * @notice Convert a 32-bit integer to a Uint8Array.\n * @param {number} value The 32-bit integer to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 4 containing the integer.\n */\nexport function int32ToBytes(value: number, littleEndian: boolean = false): Uint8Array {\n  const buffer = new ArrayBuffer(4)\n  const dataView = new DataView(buffer)\n  dataView.setUint32(0, value, littleEndian)\n  return new Uint8Array(buffer)\n}\n\n/**\n * @notice Convert a 64-bit bigint to a Uint8Array.\n * @param {bigint} value The 64-bit bigint to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 8 containing the bigint.\n */\nexport function bigInt64ToBytes(value: bigint, littleEndian: boolean = false): Uint8Array {\n  const buffer = new ArrayBuffer(8)\n  const dataView = new DataView(buffer)\n  dataView.setBigUint64(0, value, littleEndian)\n  return new Uint8Array(buffer)\n}\n\n// eslint-disable-next-line no-restricted-imports\nexport { bytesToUtf8, equalsBytes, utf8ToBytes } from 'ethereum-cryptography/utils.js'\n", "/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */\n\nimport { bytesToUnprefixedHex, utf8ToBytes } from './bytes.js'\n\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nexport function isHexPrefixed(str: string): boolean {\n  if (typeof str !== 'string') {\n    throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`)\n  }\n\n  return str[0] === '0' && str[1] === 'x'\n}\n\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nexport const stripHexPrefix = (str: string): string => {\n  if (typeof str !== 'string')\n    throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`)\n\n  return isHexPrefixed(str) ? str.slice(2) : str\n}\n\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nexport function padToEven(value: string): string {\n  let a = value\n\n  if (typeof a !== 'string') {\n    throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`)\n  }\n\n  if (a.length % 2) a = `0${a}`\n\n  return a\n}\n\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */\nexport function getBinarySize(str: string) {\n  if (typeof str !== 'string') {\n    throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`)\n  }\n\n  return utf8ToBytes(str).byteLength\n}\n\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */\nexport function arrayContainsArray(\n  superset: unknown[],\n  subset: unknown[],\n  some?: boolean\n): boolean {\n  if (Array.isArray(superset) !== true) {\n    throw new Error(\n      `[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`\n    )\n  }\n  if (Array.isArray(subset) !== true) {\n    throw new Error(\n      `[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`\n    )\n  }\n\n  return subset[some === true ? 'some' : 'every']((value) => superset.indexOf(value) >= 0)\n}\n\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */\nexport function toAscii(hex: string): string {\n  let str = ''\n  let i = 0\n  const l = hex.length\n\n  if (hex.substring(0, 2) === '0x') i = 2\n\n  for (; i < l; i += 2) {\n    const code = parseInt(hex.substr(i, 2), 16)\n    str += String.fromCharCode(code)\n  }\n\n  return str\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string.\n * Strips leading and trailing 0's.\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */\nexport function fromUtf8(stringValue: string) {\n  const str = utf8ToBytes(stringValue)\n\n  return `0x${padToEven(bytesToUnprefixedHex(str)).replace(/^0+|0+$/g, '')}`\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */\nexport function fromAscii(stringValue: string) {\n  let hex = ''\n  for (let i = 0; i < stringValue.length; i++) {\n    const code = stringValue.charCodeAt(i)\n    const n = code.toString(16)\n    hex += n.length < 2 ? `0${n}` : n\n  }\n\n  return `0x${hex}`\n}\n\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */\nexport function getKeys(params: Record<string, string>[], key: string, allowEmpty?: boolean) {\n  if (!Array.isArray(params)) {\n    throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`)\n  }\n  if (typeof key !== 'string') {\n    throw new Error(\n      `[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`\n    )\n  }\n\n  const result = []\n\n  for (let i = 0; i < params.length; i++) {\n    let value = params[i][key]\n    if (allowEmpty === true && !value) {\n      value = ''\n    } else if (typeof value !== 'string') {\n      throw new Error(`invalid abi - expected type 'string', received ${typeof value}`)\n    }\n    result.push(value)\n  }\n\n  return result\n}\n\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */\nexport function isHexString(value: string, length?: number): boolean {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) return false\n\n  if (typeof length !== 'undefined' && length > 0 && value.length !== 2 + 2 * length) return false\n\n  return true\n}\n", "export type Input = string | number | bigint | Uint8Array | Array<Input> | null | undefined\n\nexport type NestedUint8Array = Array<Uint8Array | NestedUint8Array>\n\nexport interface Decoded {\n  data: Uint8Array | NestedUint8Array\n  remainder: Uint8Array\n}\n\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nexport function encode(input: Input): Uint8Array {\n  if (Array.isArray(input)) {\n    const output: Uint8Array[] = []\n    let outputLength = 0\n    for (let i = 0; i < input.length; i++) {\n      const encoded = encode(input[i])\n      output.push(encoded)\n      outputLength += encoded.length\n    }\n    return concatBytes(encodeLength(outputLength, 192), ...output)\n  }\n  const inputBuf = toBytes(input)\n  if (inputBuf.length === 1 && inputBuf[0] < 128) {\n    return inputBuf\n  }\n  return concatBytes(encodeLength(inputBuf.length, 128), inputBuf)\n}\n\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input: Uint8Array, start: number, end: number) {\n  if (end > input.length) {\n    throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds')\n  }\n  return input.slice(start, end)\n}\n\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v: Uint8Array): number {\n  if (v[0] === 0) {\n    throw new Error('invalid RLP: extra zeros')\n  }\n  return parseHexByte(bytesToHex(v))\n}\n\nfunction encodeLength(len: number, offset: number): Uint8Array {\n  if (len < 56) {\n    return Uint8Array.from([len + offset])\n  }\n  const hexLength = numberToHex(len)\n  const lLength = hexLength.length / 2\n  const firstByte = numberToHex(offset + 55 + lLength)\n  return Uint8Array.from(hexToBytes(firstByte + hexLength))\n}\n\n/**\n * RLP Decoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * @param input Will be converted to Uint8Array\n * @param stream Is the input a stream (false by default)\n * @returns decoded Array of Uint8Arrays containing the original message\n **/\nexport function decode(input: Input, stream?: false): Uint8Array | NestedUint8Array\nexport function decode(input: Input, stream?: true): Decoded\nexport function decode(input: Input, stream = false): Uint8Array | NestedUint8Array | Decoded {\n  if (typeof input === 'undefined' || input === null || (input as any).length === 0) {\n    return Uint8Array.from([])\n  }\n\n  const inputBytes = toBytes(input)\n  const decoded = _decode(inputBytes)\n\n  if (stream) {\n    return {\n      data: decoded.data,\n      remainder: decoded.remainder.slice(),\n    }\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid RLP: remainder must be zero')\n  }\n\n  return decoded.data\n}\n\n/** Decode an input with RLP */\nfunction _decode(input: Uint8Array): Decoded {\n  let length: number, llength: number, data: Uint8Array, innerRemainder: Uint8Array, d: Decoded\n  const decoded = []\n  const firstByte = input[0]\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.subarray(1),\n    }\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f\n\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = Uint8Array.from([])\n    } else {\n      data = safeSlice(input, 1, length)\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed')\n    }\n\n    return {\n      data,\n      remainder: input.subarray(length),\n    }\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length')\n    }\n    length = decodeLength(safeSlice(input, 1, llength))\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55')\n    }\n    data = safeSlice(input, llength, length + llength)\n\n    return {\n      data,\n      remainder: input.subarray(length + llength),\n    }\n  } else if (firstByte <= 0xf7) {\n    // a list between 0-55 bytes long\n    length = firstByte - 0xbf\n    innerRemainder = safeSlice(input, 1, length)\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n\n    return {\n      data: decoded,\n      remainder: input.subarray(length),\n    }\n  } else {\n    // a list over 55 bytes long\n    llength = firstByte - 0xf6\n    length = decodeLength(safeSlice(input, 1, llength))\n    if (length < 56) {\n      throw new Error('invalid RLP: encoded list too short')\n    }\n    const totalLength = llength + length\n    if (totalLength > input.length) {\n      throw new Error('invalid RLP: total length is larger than the data')\n    }\n\n    innerRemainder = safeSlice(input, llength, totalLength)\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n\n    return {\n      data: decoded,\n      remainder: input.subarray(totalLength),\n    }\n  }\n}\n\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'))\nfunction bytesToHex(uint8a: Uint8Array): string {\n  // Pre-caching chars with `cachedHexes` speeds this up 6x\n  let hex = ''\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += cachedHexes[uint8a[i]]\n  }\n  return hex\n}\n\nfunction parseHexByte(hexByte: string): number {\n  const byte = Number.parseInt(hexByte, 16)\n  if (Number.isNaN(byte)) throw new Error('Invalid byte sequence')\n  return byte\n}\n\n// Caching slows it down 2-3x\nfunction hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex)\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex')\n  const array = new Uint8Array(hex.length / 2)\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2\n    array[i] = parseHexByte(hex.slice(j, j + 2))\n  }\n  return array\n}\n\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (arrays.length === 1) return arrays[0]\n  const length = arrays.reduce((a, arr) => a + arr.length, 0)\n  const result = new Uint8Array(length)\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i]\n    result.set(arr, pad)\n    pad += arr.length\n  }\n  return result\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any\ndeclare const TextDecoder: any\n\nfunction utf8ToBytes(utf: string): Uint8Array {\n  return new TextEncoder().encode(utf)\n}\n\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer: number | bigint): string {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!')\n  }\n  const hex = integer.toString(16)\n  return hex.length % 2 ? `0${hex}` : hex\n}\n\n/** Pad a string to be even */\nfunction padToEven(a: string): string {\n  return a.length % 2 ? `0${a}` : a\n}\n\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str: string): boolean {\n  return str.length >= 2 && str[0] === '0' && str[1] === 'x'\n}\n\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str: string): string {\n  if (typeof str !== 'string') {\n    return str\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str\n}\n\n/** Transform anything into a Uint8Array */\nfunction toBytes(v: Input): Uint8Array {\n  if (v instanceof Uint8Array) {\n    return v\n  }\n  if (typeof v === 'string') {\n    if (isHexPrefixed(v)) {\n      return hexToBytes(padToEven(stripHexPrefix(v)))\n    }\n    return utf8ToBytes(v)\n  }\n  if (typeof v === 'number' || typeof v === 'bigint') {\n    if (!v) {\n      return Uint8Array.from([])\n    }\n    return hexToBytes(numberToHex(v))\n  }\n  if (v === null || v === undefined) {\n    return Uint8Array.from([])\n  }\n  throw new Error('toBytes: received unsupported type ' + typeof v)\n}\n\nexport const utils = {\n  bytesToHex,\n  concatBytes,\n  hexToBytes,\n  utf8ToBytes,\n}\n\nexport const RLP = { encode, decode }\n", "import { secp256k1 } from 'ethereum-cryptography/secp256k1.js'\n\nimport { hexToBytes } from './bytes.js'\n\n/**\n * 2^64-1\n */\nexport const MAX_UINT64 = BigInt('0xffffffffffffffff')\n\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nexport const MAX_INTEGER = BigInt(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n)\n\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */\nexport const MAX_INTEGER_BIGINT = BigInt(\n  '115792089237316195423570985008687907853269984665640564039457584007913129639935'\n)\n\nexport const SECP256K1_ORDER = secp256k1.CURVE.n\nexport const SECP256K1_ORDER_DIV_2 = secp256k1.CURVE.n / BigInt(2)\n\n/**\n * 2^256\n */\nexport const TWO_POW256 = BigInt(\n  '0x10000000000000000000000000000000000000000000000000000000000000000'\n)\n\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL = hexToBytes(KECCAK256_NULL_S)\n\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY_S =\n  '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'\n\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY = hexToBytes(KECCAK256_RLP_ARRAY_S)\n\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP_S = '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'\n\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP = hexToBytes(KECCAK256_RLP_S)\n\n/**\n *  RLP encoded empty string\n */\nexport const RLP_EMPTY_STRING = Uint8Array.from([0x80])\n\nexport const MAX_WITHDRAWALS_PER_PAYLOAD = 16\n\nexport const RIPEMD160_ADDRESS_STRING = '0000000000000000000000000000000000000003'\n\n/**\n * BigInt constants\n */\n\nexport const BIGINT_NEG1 = BigInt(-1)\n\nexport const BIGINT_0 = BigInt(0)\nexport const BIGINT_1 = BigInt(1)\nexport const BIGINT_2 = BigInt(2)\nexport const BIGINT_3 = BigInt(3)\nexport const BIGINT_7 = BigInt(7)\nexport const BIGINT_8 = BigInt(8)\n\nexport const BIGINT_27 = BigInt(27)\nexport const BIGINT_28 = BigInt(28)\nexport const BIGINT_31 = BigInt(31)\nexport const BIGINT_32 = BigInt(32)\nexport const BIGINT_64 = BigInt(64)\n\nexport const BIGINT_128 = BigInt(128)\nexport const BIGINT_255 = BigInt(255)\nexport const BIGINT_256 = BigInt(256)\n\nexport const BIGINT_96 = BigInt(96)\nexport const BIGINT_100 = BigInt(100)\nexport const BIGINT_160 = BigInt(160)\nexport const BIGINT_224 = BigInt(224)\nexport const BIGINT_2EXP96 = BigInt(79228162514264337593543950336)\nexport const BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976)\nexport const BIGINT_2EXP224 =\n  BigInt(26959946667150639794667015087019630673637144422540572481103610249216)\nexport const BIGINT_2EXP256 = BIGINT_2 ** BIGINT_256\n", "import { RLP } from '@ethereumjs/rlp'\nimport { keccak256 } from 'ethereum-cryptography/keccak.js'\nimport { secp256k1 } from 'ethereum-cryptography/secp256k1.js'\n\nimport {\n  bigIntToUnpaddedBytes,\n  bytesToBigInt,\n  bytesToHex,\n  concatBytes,\n  equalsBytes,\n  hexToBytes,\n  toBytes,\n  utf8ToBytes,\n  zeros,\n} from './bytes.js'\nimport { BIGINT_0, KECCAK256_NULL, KECCAK256_RLP } from './constants.js'\nimport { assertIsBytes, assertIsHexString, assertIsString } from './helpers.js'\nimport { stripHexPrefix } from './internal.js'\n\nimport type { BigIntLike, BytesLike } from './types.js'\n\nexport interface AccountData {\n  nonce?: BigIntLike\n  balance?: BigIntLike\n  storageRoot?: BytesLike\n  codeHash?: BytesLike\n}\n\nexport type AccountBodyBytes = [Uint8Array, Uint8Array, Uint8Array, Uint8Array]\n\nexport class Account {\n  nonce: bigint\n  balance: bigint\n  storageRoot: Uint8Array\n  codeHash: Uint8Array\n\n  static fromAccountData(accountData: AccountData) {\n    const { nonce, balance, storageRoot, codeHash } = accountData\n\n    return new Account(\n      nonce !== undefined ? bytesToBigInt(toBytes(nonce)) : undefined,\n      balance !== undefined ? bytesToBigInt(toBytes(balance)) : undefined,\n      storageRoot !== undefined ? toBytes(storageRoot) : undefined,\n      codeHash !== undefined ? toBytes(codeHash) : undefined\n    )\n  }\n\n  public static fromRlpSerializedAccount(serialized: Uint8Array) {\n    const values = RLP.decode(serialized) as Uint8Array[]\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized account input. Must be array')\n    }\n\n    return this.fromValuesArray(values)\n  }\n\n  public static fromValuesArray(values: Uint8Array[]) {\n    const [nonce, balance, storageRoot, codeHash] = values\n\n    return new Account(bytesToBigInt(nonce), bytesToBigInt(balance), storageRoot, codeHash)\n  }\n\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating an Account from varying data types.\n   */\n  constructor(\n    nonce = BIGINT_0,\n    balance = BIGINT_0,\n    storageRoot = KECCAK256_RLP,\n    codeHash = KECCAK256_NULL\n  ) {\n    this.nonce = nonce\n    this.balance = balance\n    this.storageRoot = storageRoot\n    this.codeHash = codeHash\n\n    this._validate()\n  }\n\n  private _validate() {\n    if (this.nonce < BIGINT_0) {\n      throw new Error('nonce must be greater than zero')\n    }\n    if (this.balance < BIGINT_0) {\n      throw new Error('balance must be greater than zero')\n    }\n    if (this.storageRoot.length !== 32) {\n      throw new Error('storageRoot must have a length of 32')\n    }\n    if (this.codeHash.length !== 32) {\n      throw new Error('codeHash must have a length of 32')\n    }\n  }\n\n  /**\n   * Returns an array of Uint8Arrays of the raw bytes for the account, in order.\n   */\n  raw(): Uint8Array[] {\n    return [\n      bigIntToUnpaddedBytes(this.nonce),\n      bigIntToUnpaddedBytes(this.balance),\n      this.storageRoot,\n      this.codeHash,\n    ]\n  }\n\n  /**\n   * Returns the RLP serialization of the account as a `Uint8Array`.\n   */\n  serialize(): Uint8Array {\n    return RLP.encode(this.raw())\n  }\n\n  /**\n   * Returns a `Boolean` determining if the account is a contract.\n   */\n  isContract(): boolean {\n    return !equalsBytes(this.codeHash, KECCAK256_NULL)\n  }\n\n  /**\n   * Returns a `Boolean` determining if the account is empty complying to the definition of\n   * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n   * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n   */\n  isEmpty(): boolean {\n    return (\n      this.balance === BIGINT_0 &&\n      this.nonce === BIGINT_0 &&\n      equalsBytes(this.codeHash, KECCAK256_NULL)\n    )\n  }\n}\n\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nexport const isValidAddress = function (hexAddress: string): boolean {\n  try {\n    assertIsString(hexAddress)\n  } catch (e: any) {\n    return false\n  }\n\n  return /^0x[0-9a-fA-F]{40}$/.test(hexAddress)\n}\n\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nexport const toChecksumAddress = function (\n  hexAddress: string,\n  eip1191ChainId?: BigIntLike\n): string {\n  assertIsHexString(hexAddress)\n  const address = stripHexPrefix(hexAddress).toLowerCase()\n\n  let prefix = ''\n  if (eip1191ChainId !== undefined) {\n    const chainId = bytesToBigInt(toBytes(eip1191ChainId))\n    prefix = chainId.toString() + '0x'\n  }\n\n  const bytes = utf8ToBytes(prefix + address)\n  const hash = bytesToHex(keccak256(bytes)).slice(2)\n  let ret = '0x'\n\n  for (let i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase()\n    } else {\n      ret += address[i]\n    }\n  }\n\n  return ret\n}\n\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nexport const isValidChecksumAddress = function (\n  hexAddress: string,\n  eip1191ChainId?: BigIntLike\n): boolean {\n  return isValidAddress(hexAddress) && toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress\n}\n\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nexport const generateAddress = function (from: Uint8Array, nonce: Uint8Array): Uint8Array {\n  assertIsBytes(from)\n  assertIsBytes(nonce)\n\n  if (bytesToBigInt(nonce) === BIGINT_0) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    return keccak256(RLP.encode([from, Uint8Array.from([])])).subarray(-20)\n  }\n\n  // Only take the lower 160bits of the hash\n  return keccak256(RLP.encode([from, nonce])).subarray(-20)\n}\n\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nexport const generateAddress2 = function (\n  from: Uint8Array,\n  salt: Uint8Array,\n  initCode: Uint8Array\n): Uint8Array {\n  assertIsBytes(from)\n  assertIsBytes(salt)\n  assertIsBytes(initCode)\n\n  if (from.length !== 20) {\n    throw new Error('Expected from to be of length 20')\n  }\n  if (salt.length !== 32) {\n    throw new Error('Expected salt to be of length 32')\n  }\n\n  const address = keccak256(concatBytes(hexToBytes('0xff'), from, salt, keccak256(initCode)))\n\n  return address.subarray(-20)\n}\n\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nexport const isValidPrivate = function (privateKey: Uint8Array): boolean {\n  return secp256k1.utils.isValidPrivateKey(privateKey)\n}\n\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexport const isValidPublic = function (publicKey: Uint8Array, sanitize: boolean = false): boolean {\n  assertIsBytes(publicKey)\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    // Automatically checks whether point is on curve\n    try {\n      secp256k1.ProjectivePoint.fromHex(concatBytes(Uint8Array.from([4]), publicKey))\n      return true\n    } catch (e) {\n      return false\n    }\n  }\n\n  if (!sanitize) {\n    return false\n  }\n\n  try {\n    secp256k1.ProjectivePoint.fromHex(publicKey)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexport const pubToAddress = function (pubKey: Uint8Array, sanitize: boolean = false): Uint8Array {\n  assertIsBytes(pubKey)\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1)\n  }\n  if (pubKey.length !== 64) {\n    throw new Error('Expected pubKey to be of length 64')\n  }\n  // Only take the lower 160bits of the hash\n  return keccak256(pubKey).subarray(-20)\n}\nexport const publicToAddress = pubToAddress\n\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexport const privateToPublic = function (privateKey: Uint8Array): Uint8Array {\n  assertIsBytes(privateKey)\n  // skip the type flag and use the X, Y points\n  return secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1)\n}\n\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexport const privateToAddress = function (privateKey: Uint8Array): Uint8Array {\n  return publicToAddress(privateToPublic(privateKey))\n}\n\n/**\n * Converts a public key to the Ethereum format.\n */\nexport const importPublic = function (publicKey: Uint8Array): Uint8Array {\n  assertIsBytes(publicKey)\n  if (publicKey.length !== 64) {\n    publicKey = secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1)\n  }\n  return publicKey\n}\n\n/**\n * Returns the zero address.\n */\nexport const zeroAddress = function (): string {\n  const addressLength = 20\n  const addr = zeros(addressLength)\n  return bytesToHex(addr)\n}\n\n/**\n * Checks if a given address is the zero address.\n */\nexport const isZeroAddress = function (hexAddress: string): boolean {\n  try {\n    assertIsString(hexAddress)\n  } catch (e: any) {\n    return false\n  }\n\n  const zeroAddr = zeroAddress()\n  return zeroAddr === hexAddress\n}\n\nexport function accountBodyFromSlim(body: AccountBodyBytes) {\n  const [nonce, balance, storageRoot, codeHash] = body\n  return [\n    nonce,\n    balance,\n    storageRoot.length === 0 ? KECCAK256_RLP : storageRoot,\n    codeHash.length === 0 ? KECCAK256_NULL : codeHash,\n  ]\n}\n\nconst emptyUint8Arr = new Uint8Array(0)\nexport function accountBodyToSlim(body: AccountBodyBytes) {\n  const [nonce, balance, storageRoot, codeHash] = body\n  return [\n    nonce,\n    balance,\n    equalsBytes(storageRoot, KECCAK256_RLP) ? emptyUint8Arr : storageRoot,\n    equalsBytes(codeHash, KECCAK256_NULL) ? emptyUint8Arr : codeHash,\n  ]\n}\n\n/**\n * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account\n * @param body Array of 4 Uint8Array-like items to represent the account\n * @returns RLP encoded version of the account\n */\nexport function accountBodyToRLP(body: AccountBodyBytes, couldBeSlim = true) {\n  const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body\n  return RLP.encode(accountBody)\n}\n", "import { BIGINT_0, BIGINT_1 } from './constants.js'\n/** Easy conversion from Gwei to wei */\nexport const GWEI_TO_WEI = BigInt(1000000000)\n\nexport function formatBigDecimal(\n  numerator: bigint,\n  denominator: bigint,\n  maxDecimalFactor: bigint\n): string {\n  if (denominator === BIGINT_0) {\n    denominator = BIGINT_1\n  }\n\n  const full = numerator / denominator\n  const fraction = ((numerator - full * denominator) * maxDecimalFactor) / denominator\n\n  // zeros to be added post decimal are number of zeros in maxDecimalFactor - number of digits in fraction\n  const zerosPostDecimal = String(maxDecimalFactor).length - 1 - String(fraction).length\n  return `${full}.${'0'.repeat(zerosPostDecimal)}${fraction}`\n}\n", "import {\n  generateAddress,\n  generateAddress2,\n  isValidAddress,\n  privateToAddress,\n  pubToAddress,\n} from './account.js'\nimport { bigIntToBytes, bytesToBigInt, bytesToHex, equalsBytes, toBytes, zeros } from './bytes.js'\nimport { BIGINT_0 } from './constants.js'\n\n/**\n * Handling and generating Ethereum addresses\n */\nexport class Address {\n  public readonly bytes: Uint8Array\n\n  constructor(bytes: Uint8Array) {\n    if (bytes.length !== 20) {\n      throw new Error('Invalid address length')\n    }\n    this.bytes = bytes\n  }\n\n  /**\n   * Returns the zero address.\n   */\n  static zero(): Address {\n    return new Address(zeros(20))\n  }\n\n  /**\n   * Returns an Address object from a hex-encoded string.\n   * @param str - Hex-encoded address\n   */\n  static fromString(str: string): Address {\n    if (!isValidAddress(str)) {\n      throw new Error('Invalid address')\n    }\n    return new Address(toBytes(str))\n  }\n\n  /**\n   * Returns an address for a given public key.\n   * @param pubKey The two points of an uncompressed key\n   */\n  static fromPublicKey(pubKey: Uint8Array): Address {\n    if (!(pubKey instanceof Uint8Array)) {\n      throw new Error('Public key should be Uint8Array')\n    }\n    const bytes = pubToAddress(pubKey)\n    return new Address(bytes)\n  }\n\n  /**\n   * Returns an address for a given private key.\n   * @param privateKey A private key must be 256 bits wide\n   */\n  static fromPrivateKey(privateKey: Uint8Array): Address {\n    if (!(privateKey instanceof Uint8Array)) {\n      throw new Error('Private key should be Uint8Array')\n    }\n    const bytes = privateToAddress(privateKey)\n    return new Address(bytes)\n  }\n\n  /**\n   * Generates an address for a newly created contract.\n   * @param from The address which is creating this new address\n   * @param nonce The nonce of the from account\n   */\n  static generate(from: Address, nonce: bigint): Address {\n    if (typeof nonce !== 'bigint') {\n      throw new Error('Expected nonce to be a bigint')\n    }\n    return new Address(generateAddress(from.bytes, bigIntToBytes(nonce)))\n  }\n\n  /**\n   * Generates an address for a contract created using CREATE2.\n   * @param from The address which is creating this new address\n   * @param salt A salt\n   * @param initCode The init code of the contract being created\n   */\n  static generate2(from: Address, salt: Uint8Array, initCode: Uint8Array): Address {\n    if (!(salt instanceof Uint8Array)) {\n      throw new Error('Expected salt to be a Uint8Array')\n    }\n    if (!(initCode instanceof Uint8Array)) {\n      throw new Error('Expected initCode to be a Uint8Array')\n    }\n    return new Address(generateAddress2(from.bytes, salt, initCode))\n  }\n\n  /**\n   * Is address equal to another.\n   */\n  equals(address: Address): boolean {\n    return equalsBytes(this.bytes, address.bytes)\n  }\n\n  /**\n   * Is address zero.\n   */\n  isZero(): boolean {\n    return this.equals(Address.zero())\n  }\n\n  /**\n   * True if address is in the address range defined\n   * by EIP-1352\n   */\n  isPrecompileOrSystemAddress(): boolean {\n    const address = bytesToBigInt(this.bytes)\n    const rangeMin = BIGINT_0\n    const rangeMax = BigInt('0xffff')\n    return address >= rangeMin && address <= rangeMax\n  }\n\n  /**\n   * Returns hex encoding of address.\n   */\n  toString(): string {\n    return bytesToHex(this.bytes)\n  }\n\n  /**\n   * Returns a new Uint8Array representation of address.\n   */\n  toBytes(): Uint8Array {\n    return new Uint8Array(this.bytes)\n  }\n}\n", "export type DBObject = {\n  [key: string]: string | string[] | number\n}\nexport type BatchDBOp<\n  TKey extends Uint8Array | string | number = Uint8Array,\n  TValue extends Uint8Array | string | DBObject = Uint8Array\n> = PutBatch<TKey, TValue> | DelBatch<TKey>\n\nexport enum KeyEncoding {\n  String = 'string',\n  Bytes = 'view',\n  Number = 'number',\n}\n\nexport enum ValueEncoding {\n  String = 'string',\n  Bytes = 'view',\n  JSON = 'json',\n}\n\nexport type EncodingOpts = {\n  keyEncoding?: KeyEncoding\n  valueEncoding?: ValueEncoding\n}\nexport interface PutBatch<\n  TKey extends Uint8Array | string | number = Uint8Array,\n  TValue extends Uint8Array | string | DBObject = Uint8Array\n> {\n  type: 'put'\n  key: TKey\n  value: TValue\n  opts?: EncodingOpts\n}\n\nexport interface DelBatch<TKey extends Uint8Array | string | number = Uint8Array> {\n  type: 'del'\n  key: TKey\n  opts?: EncodingOpts\n}\n\nexport interface DB<\n  TKey extends Uint8Array | string | number = Uint8Array,\n  TValue extends Uint8Array | string | DBObject = Uint8Array\n> {\n  /**\n   * Retrieves a raw value from db.\n   * @param key\n   * @returns A Promise that resolves to `Uint8Array` if a value is found or `undefined` if no value is found.\n   */\n  get(key: TKey, opts?: EncodingOpts): Promise<TValue | undefined>\n\n  /**\n   * Writes a value directly to db.\n   * @param key The key as a `TValue`\n   * @param value The value to be stored\n   */\n  put(key: TKey, val: TValue, opts?: EncodingOpts): Promise<void>\n\n  /**\n   * Removes a raw value in the underlying db.\n   * @param keys\n   */\n  del(key: TKey, opts?: EncodingOpts): Promise<void>\n\n  /**\n   * Performs a batch operation on db.\n   * @param opStack A stack of levelup operations\n   */\n  batch(opStack: BatchDBOp<TKey, TValue>[]): Promise<void>\n\n  /**\n   * Returns a copy of the DB instance, with a reference\n   * to the **same** underlying db instance.\n   */\n  shallowCopy(): DB<TKey, TValue>\n\n  /**\n   * Opens the database -- if applicable\n   */\n  open(): Promise<void>\n  // TODO - decide if we actually need open/close - it's not required for maps and Level automatically opens the DB when you instantiate it\n}\n", "import { bytesToBigInt, bytesToHex, toBytes } from './bytes.js'\nimport { isHexString } from './internal.js'\n\nimport type { Address } from './address.js'\nimport type { ToBytesInputTypes } from './bytes.js'\n\n/*\n * A type that represents an input that can be converted to a BigInt.\n */\nexport type BigIntLike = bigint | PrefixedHexString | number | Uint8Array\n\n/*\n * A type that represents an input that can be converted to a Uint8Array.\n */\nexport type BytesLike =\n  | Uint8Array\n  | number[]\n  | number\n  | bigint\n  | TransformabletoBytes\n  | PrefixedHexString\n\n/*\n * A type that represents a `0x`-prefixed hex string.\n */\nexport type PrefixedHexString = string\n\n/**\n * A type that represents an input that can be converted to an Address.\n */\nexport type AddressLike = Address | Uint8Array | PrefixedHexString\n\nexport interface TransformabletoBytes {\n  toBytes?(): Uint8Array\n}\n\nexport type NestedUint8Array = Array<Uint8Array | NestedUint8Array>\n\n/**\n * Type output options\n */\nexport enum TypeOutput {\n  Number,\n  BigInt,\n  Uint8Array,\n  PrefixedHexString,\n}\n\nexport type TypeOutputReturnType = {\n  [TypeOutput.Number]: number\n  [TypeOutput.BigInt]: bigint\n  [TypeOutput.Uint8Array]: Uint8Array\n  [TypeOutput.PrefixedHexString]: PrefixedHexString\n}\n\n/**\n * Convert an input to a specified type.\n * Input of null/undefined returns null/undefined regardless of the output type.\n * @param input value to convert\n * @param outputType type to output\n */\nexport function toType<T extends TypeOutput>(input: null, outputType: T): null\nexport function toType<T extends TypeOutput>(input: undefined, outputType: T): undefined\nexport function toType<T extends TypeOutput>(\n  input: ToBytesInputTypes,\n  outputType: T\n): TypeOutputReturnType[T]\nexport function toType<T extends TypeOutput>(\n  input: ToBytesInputTypes,\n  outputType: T\n): TypeOutputReturnType[T] | undefined | null {\n  if (input === null) {\n    return null\n  }\n  if (input === undefined) {\n    return undefined\n  }\n\n  if (typeof input === 'string' && !isHexString(input)) {\n    throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`)\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error(\n      'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'\n    )\n  }\n\n  const output = toBytes(input)\n\n  switch (outputType) {\n    case TypeOutput.Uint8Array:\n      return output as TypeOutputReturnType[T]\n    case TypeOutput.BigInt:\n      return bytesToBigInt(output) as TypeOutputReturnType[T]\n    case TypeOutput.Number: {\n      const bigInt = bytesToBigInt(output)\n      if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n        throw new Error(\n          'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)'\n        )\n      }\n      return Number(bigInt) as TypeOutputReturnType[T]\n    }\n    case TypeOutput.PrefixedHexString:\n      return bytesToHex(output) as TypeOutputReturnType[T]\n    default:\n      throw new Error('unknown outputType')\n  }\n}\n", "import { keccak256 } from 'ethereum-cryptography/keccak.js'\nimport { secp256k1 } from 'ethereum-cryptography/secp256k1.js'\n\nimport {\n  bytesToBigInt,\n  bytesToHex,\n  bytesToInt,\n  concatBytes,\n  setLengthLeft,\n  toBytes,\n  utf8ToBytes,\n} from './bytes.js'\nimport {\n  BIGINT_0,\n  BIGINT_1,\n  BIGINT_2,\n  BIGINT_27,\n  SECP256K1_ORDER,\n  SECP256K1_ORDER_DIV_2,\n} from './constants.js'\nimport { assertIsBytes } from './helpers.js'\n\nexport interface ECDSASignature {\n  v: bigint\n  r: Uint8Array\n  s: Uint8Array\n}\n\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nexport function ecsign(\n  msgHash: Uint8Array,\n  privateKey: Uint8Array,\n  chainId?: bigint\n): ECDSASignature {\n  const sig = secp256k1.sign(msgHash, privateKey)\n  const buf = sig.toCompactRawBytes()\n  const r = buf.slice(0, 32)\n  const s = buf.slice(32, 64)\n\n  const v =\n    chainId === undefined\n      ? BigInt(sig.recovery! + 27)\n      : BigInt(sig.recovery! + 35) + BigInt(chainId) * BIGINT_2\n\n  return { r, s, v }\n}\n\nexport function calculateSigRecovery(v: bigint, chainId?: bigint): bigint {\n  if (v === BIGINT_0 || v === BIGINT_1) return v\n\n  if (chainId === undefined) {\n    return v - BIGINT_27\n  }\n  return v - (chainId * BIGINT_2 + BigInt(35))\n}\n\nfunction isValidSigRecovery(recovery: bigint): boolean {\n  return recovery === BIGINT_0 || recovery === BIGINT_1\n}\n\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (\n  msgHash: Uint8Array,\n  v: bigint,\n  r: Uint8Array,\n  s: Uint8Array,\n  chainId?: bigint\n): Uint8Array {\n  const signature = concatBytes(setLengthLeft(r, 32), setLengthLeft(s, 32))\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  const sig = secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery))\n  const senderPubKey = sig.recoverPublicKey(msgHash)\n  return senderPubKey.toRawBytes(false).slice(1)\n}\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toRpcSig = function (\n  v: bigint,\n  r: Uint8Array,\n  s: Uint8Array,\n  chainId?: bigint\n): string {\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n\n  return bytesToHex(concatBytes(setLengthLeft(r, 32), setLengthLeft(s, 32), toBytes(v)))\n}\n\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toCompactSig = function (\n  v: bigint,\n  r: Uint8Array,\n  s: Uint8Array,\n  chainId?: bigint\n): string {\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  const ss = Uint8Array.from([...s])\n  if ((v > BigInt(28) && v % BIGINT_2 === BIGINT_1) || v === BIGINT_1 || v === BigInt(28)) {\n    ss[0] |= 0x80\n  }\n\n  return bytesToHex(concatBytes(setLengthLeft(r, 32), setLengthLeft(ss, 32)))\n}\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nexport const fromRpcSig = function (sig: string): ECDSASignature {\n  const bytes: Uint8Array = toBytes(sig)\n\n  let r: Uint8Array\n  let s: Uint8Array\n  let v: bigint\n  if (bytes.length >= 65) {\n    r = bytes.subarray(0, 32)\n    s = bytes.subarray(32, 64)\n    v = bytesToBigInt(bytes.subarray(64))\n  } else if (bytes.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = bytes.subarray(0, 32)\n    s = bytes.subarray(32, 64)\n    v = BigInt(bytesToInt(bytes.subarray(32, 33)) >> 7)\n    s[0] &= 0x7f\n  } else {\n    throw new Error('Invalid signature length')\n  }\n\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v = v + BIGINT_27\n  }\n\n  return {\n    v,\n    r,\n    s,\n  }\n}\n\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexport const isValidSignature = function (\n  v: bigint,\n  r: Uint8Array,\n  s: Uint8Array,\n  homesteadOrLater: boolean = true,\n  chainId?: bigint\n): boolean {\n  if (r.length !== 32 || s.length !== 32) {\n    return false\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false\n  }\n\n  const rBigInt = bytesToBigInt(r)\n  const sBigInt = bytesToBigInt(s)\n\n  if (\n    rBigInt === BIGINT_0 ||\n    rBigInt >= SECP256K1_ORDER ||\n    sBigInt === BIGINT_0 ||\n    sBigInt >= SECP256K1_ORDER\n  ) {\n    return false\n  }\n\n  if (homesteadOrLater && sBigInt >= SECP256K1_ORDER_DIV_2) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexport const hashPersonalMessage = function (message: Uint8Array): Uint8Array {\n  assertIsBytes(message)\n  const prefix = utf8ToBytes(`\\u0019Ethereum Signed Message:\\n${message.length}`)\n  return keccak256(concatBytes(prefix, message))\n}\n", "/**\n * Ported to Typescript from original implementation below:\n * https://github.com/ahultgren/async-eventemitter -- MIT licensed\n *\n * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed\n * that was contributed to Definitely Typed below:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter\n */\n\nimport { EventEmitter } from 'events'\ntype AsyncListener<T, R> =\n  | ((data: T, callback?: (result?: R) => void) => Promise<R>)\n  | ((data: T, callback?: (result?: R) => void) => void)\nexport interface EventMap {\n  [event: string]: AsyncListener<any, any>\n}\n\nasync function runInSeries(\n  context: any,\n  tasks: Array<(data: unknown, callback?: (error?: Error) => void) => void>,\n  data: unknown\n): Promise<void> {\n  let error: Error | undefined\n  for await (const task of tasks) {\n    try {\n      if (task.length < 2) {\n        //sync\n        task.call(context, data)\n      } else {\n        await new Promise<void>((resolve, reject) => {\n          task.call(context, data, (error) => {\n            if (error) {\n              reject(error)\n            } else {\n              resolve()\n            }\n          })\n        })\n      }\n    } catch (e: unknown) {\n      error = e as Error\n    }\n  }\n  if (error) {\n    throw error\n  }\n}\n\nexport class AsyncEventEmitter<T extends EventMap> extends EventEmitter {\n  emit<E extends keyof T>(event: E & string, ...args: Parameters<T[E]>) {\n    let [data, callback] = args\n    const self = this\n\n    let listeners = (self as any)._events[event] ?? []\n\n    // Optional data argument\n    if (callback === undefined && typeof data === 'function') {\n      callback = data\n      data = undefined\n    }\n\n    // Special treatment of internal newListener and removeListener events\n    if (event === 'newListener' || event === 'removeListener') {\n      data = {\n        event: data,\n        fn: callback,\n      }\n\n      callback = undefined\n    }\n\n    // A single listener is just a function not an array...\n    listeners = Array.isArray(listeners) ? listeners : [listeners]\n    runInSeries(self, listeners.slice(), data).then(callback).catch(callback)\n\n    return self.listenerCount(event) > 0\n  }\n\n  once<E extends keyof T>(event: E & string, listener: T[E]): this {\n    const self = this\n    let g: (...args: any[]) => void\n\n    if (typeof listener !== 'function') {\n      throw new TypeError('listener must be a function')\n    }\n\n    // Hack to support set arity\n    if (listener.length >= 2) {\n      g = function (e: E, next: any) {\n        self.removeListener(event, g as T[E])\n        void listener(e, next)\n      }\n    } else {\n      g = function (e: E) {\n        self.removeListener(event, g as T[E])\n        void listener(e, g)\n      }\n    }\n\n    self.on(event, g as T[E])\n\n    return self\n  }\n\n  first<E extends keyof T>(event: E & string, listener: T[E]): this {\n    let listeners = (this as any)._events[event] ?? []\n\n    // Contract\n    if (typeof listener !== 'function') {\n      throw new TypeError('listener must be a function')\n    }\n\n    // Listeners are not always an array\n    if (!Array.isArray(listeners)) {\n      ;(this as any)._events[event] = listeners = [listeners]\n    }\n\n    listeners.unshift(listener)\n\n    return this\n  }\n\n  before<E extends keyof T>(event: E & string, target: T[E], listener: T[E]): this {\n    return this.beforeOrAfter(event, target, listener)\n  }\n\n  after<E extends keyof T>(event: E & string, target: T[E], listener: T[E]): this {\n    return this.beforeOrAfter(event, target, listener, 'after')\n  }\n\n  private beforeOrAfter<E extends keyof T>(\n    event: E & string,\n    target: T[E],\n    listener: T[E],\n    beforeOrAfter?: string\n  ) {\n    let listeners = (this as any)._events[event] ?? []\n    let i\n    let index\n    const add = beforeOrAfter === 'after' ? 1 : 0\n\n    // Contract\n    if (typeof listener !== 'function') {\n      throw new TypeError('listener must be a function')\n    }\n    if (typeof target !== 'function') {\n      throw new TypeError('target must be a function')\n    }\n\n    // Listeners are not always an array\n    if (!Array.isArray(listeners)) {\n      ;(this as any)._events[event] = listeners = [listeners]\n    }\n\n    index = listeners.length\n\n    for (i = listeners.length; i--; ) {\n      if (listeners[i] === target) {\n        index = i + add\n        break\n      }\n    }\n\n    listeners.splice(index, 0, listener)\n\n    return this\n  }\n\n  on<E extends keyof T>(event: E & string, listener: T[E]): this {\n    return super.on(event, listener)\n  }\n\n  addListener<E extends keyof T>(event: E & string, listener: T[E]): this {\n    return super.addListener(event, listener)\n  }\n\n  prependListener<E extends keyof T>(event: E & string, listener: T[E]): this {\n    return super.prependListener(event, listener)\n  }\n\n  prependOnceListener<E extends keyof T>(event: E & string, listener: T[E]): this {\n    return super.prependOnceListener(event, listener)\n  }\n\n  removeAllListeners(event?: keyof T & string): this {\n    return super.removeAllListeners(event)\n  }\n\n  removeListener<E extends keyof T>(event: E & string, listener: T[E]): this {\n    return super.removeListener(event, listener)\n  }\n\n  eventNames(): Array<keyof T & string> {\n    return super.eventNames() as keyof T & string[]\n  }\n\n  listeners<E extends keyof T>(event: E & string): Array<T[E]> {\n    return super.listeners(event) as T[E][]\n  }\n\n  listenerCount(event: keyof T & string): number {\n    return super.listenerCount(event)\n  }\n\n  getMaxListeners(): number {\n    return super.getMaxListeners()\n  }\n\n  setMaxListeners(maxListeners: number): this {\n    return super.setMaxListeners(maxListeners)\n  }\n}\n", "import { sha256 } from 'ethereum-cryptography/sha256.js'\n\nimport { utf8ToBytes } from './bytes.js'\n\nimport type { Kzg } from './kzg.js'\n\n/**\n * These utilities for constructing blobs are borrowed from https://github.com/Inphi/eip4844-interop.git\n */\nconst BYTES_PER_FIELD_ELEMENT = 32\nconst FIELD_ELEMENTS_PER_BLOB = 4096\nconst USEFUL_BYTES_PER_BLOB = 32 * FIELD_ELEMENTS_PER_BLOB\nconst MAX_BLOBS_PER_TX = 2\nconst MAX_USEFUL_BYTES_PER_TX = USEFUL_BYTES_PER_BLOB * MAX_BLOBS_PER_TX - 1\nconst BLOB_SIZE = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB\n\nfunction get_padded(data: Uint8Array, blobs_len: number): Uint8Array {\n  const pdata = new Uint8Array(blobs_len * USEFUL_BYTES_PER_BLOB).fill(0)\n  pdata.set(data)\n  pdata[data.byteLength] = 0x80\n  return pdata\n}\n\nfunction get_blob(data: Uint8Array): Uint8Array {\n  const blob = new Uint8Array(BLOB_SIZE)\n  for (let i = 0; i < FIELD_ELEMENTS_PER_BLOB; i++) {\n    const chunk = new Uint8Array(32)\n    chunk.set(data.subarray(i * 31, (i + 1) * 31), 0)\n    blob.set(chunk, i * 32)\n  }\n\n  return blob\n}\n\nexport const getBlobs = (input: string) => {\n  const data = utf8ToBytes(input)\n  const len = data.byteLength\n  if (len === 0) {\n    throw Error('invalid blob data')\n  }\n  if (len > MAX_USEFUL_BYTES_PER_TX) {\n    throw Error('blob data is too large')\n  }\n\n  const blobs_len = Math.ceil(len / USEFUL_BYTES_PER_BLOB)\n\n  const pdata = get_padded(data, blobs_len)\n\n  const blobs: Uint8Array[] = []\n  for (let i = 0; i < blobs_len; i++) {\n    const chunk = pdata.subarray(i * USEFUL_BYTES_PER_BLOB, (i + 1) * USEFUL_BYTES_PER_BLOB)\n    const blob = get_blob(chunk)\n    blobs.push(blob)\n  }\n\n  return blobs\n}\n\nexport const blobsToCommitments = (kzg: Kzg, blobs: Uint8Array[]) => {\n  const commitments: Uint8Array[] = []\n  for (const blob of blobs) {\n    commitments.push(kzg.blobToKzgCommitment(blob))\n  }\n  return commitments\n}\n\nexport const blobsToProofs = (kzg: Kzg, blobs: Uint8Array[], commitments: Uint8Array[]) => {\n  const proofs = blobs.map((blob, ctx) => kzg.computeBlobKzgProof(blob, commitments[ctx]))\n\n  return proofs\n}\n\n/**\n * Converts a vector commitment for a given data blob to its versioned hash.  For 4844, this version\n * number will be 0x01 for KZG vector commitments but could be different if future vector commitment\n * types are introduced\n * @param commitment a vector commitment to a blob\n * @param blobCommitmentVersion the version number corresponding to the type of vector commitment\n * @returns a versioned hash corresponding to a given blob vector commitment\n */\nexport const computeVersionedHash = (commitment: Uint8Array, blobCommitmentVersion: number) => {\n  const computedVersionedHash = new Uint8Array(32)\n  computedVersionedHash.set([blobCommitmentVersion], 0)\n  computedVersionedHash.set(sha256(commitment).subarray(1), 1)\n  return computedVersionedHash\n}\n\n/**\n * Generate an array of versioned hashes from corresponding kzg commitments\n * @param commitments array of kzg commitments\n * @returns array of versioned hashes\n * Note: assumes KZG commitments (version 1 version hashes)\n */\nexport const commitmentsToVersionedHashes = (commitments: Uint8Array[]) => {\n  const hashes: Uint8Array[] = []\n  for (const commitment of commitments) {\n    hashes.push(computeVersionedHash(commitment, 0x01))\n  }\n  return hashes\n}\n", "type rpcParams = {\n  method: string\n  params: (string | boolean | number)[]\n}\n\n/**\n * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.\n * No parameter or response validation is done.\n *\n * @param url the URL for the JSON RPC provider\n * @param params the parameters for the JSON-RPC method - refer to\n * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods\n * @returns the `result` field from the JSON-RPC response\n * @example\n * ```ts\n * const provider = 'https://mainnet.infura.io/v3/...'\n * const params = {\n *   method: 'eth_getBlockByNumber',\n *   params: ['latest', false],\n * }\n *  const block = await fetchFromProvider(provider, params)\n */\nexport const fetchFromProvider = async (url: string, params: rpcParams) => {\n  const data = JSON.stringify({\n    method: params.method,\n    params: params.params,\n    jsonrpc: '2.0',\n    id: 1,\n  })\n\n  const res = await fetch(url, {\n    headers: {\n      'content-type': 'application/json',\n    },\n    method: 'POST',\n    body: data,\n  })\n  if (!res.ok) {\n    throw new Error(\n      `JSONRpcError: ${JSON.stringify(\n        {\n          method: params.method,\n          status: res.status,\n          message: await res.text().catch(() => {\n            return 'Could not parse error message likely because of a network error'\n          }),\n        },\n        null,\n        2\n      )}`\n    )\n  }\n  const json = await res.json()\n  // TODO we should check json.error here\n  return json.result\n}\n\n/**\n *\n * @param provider a URL string or {@link EthersProvider}\n * @returns the extracted URL string for the JSON-RPC Provider\n */\nexport const getProvider = (provider: string | EthersProvider) => {\n  if (typeof provider === 'string') {\n    return provider\n  } else if (typeof provider === 'object' && provider._getConnection !== undefined) {\n    return provider._getConnection().url\n  } else {\n    throw new Error('Must provide valid provider URL or Web3Provider')\n  }\n}\n\n/**\n * A partial interface for an `ethers` `JsonRpcProvider`\n * We only use the url string since we do raw `fetch` calls to\n * retrieve the necessary data\n */\nexport interface EthersProvider {\n  _getConnection: () => {\n    url: string\n  }\n}\n"],
  "mappings": "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",
  "names": ["bytesToHex", "bytesToHex", "concatBytes", "toBytes", "bytesToHex", "hexToBytes", "utf8ToBytes", "padToEven", "isHexPrefixed", "stripHexPrefix", "BIGINT_0", "BIGINT_0", "BIGINT_0", "bytesToHex", "KeyEncoding", "ValueEncoding", "TypeOutput", "bytesToHex", "BIGINT_0"]
}
